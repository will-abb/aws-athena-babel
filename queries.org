#+title: Queries

* Cloudformation
** Find who has modified a cloudformation stack
#+begin_src athena var account="12345678910"
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  requestParameters,
  responseElements,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  eventSource = 'cloudformation.amazonaws.com'
  AND eventName IN (
    'CreateStack',
    'UpdateStack',
    'DeleteStack',
    'RollbackStack',
    'ExecuteChangeSet',
    'CreateChangeSet',
    'DeleteChangeSet'
  )
  AND json_extract_scalar(requestParameters, '$.stackName') = 'MyCloudFormationStackName'
  AND userIdentity.accountId = '${account}'
  AND account = '${account}'
  AND year = '2025'
  AND month = '07'
  AND day = '09'
ORDER BY
  eventTime ASC
LIMIT 500;
#+end_src

* Lambda
** what lambda has provisioned/modified aws workspaces (can be used to find wha lambdas have performed a specific action)
#+begin_src athena  :var account=12345678910
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  eventSource,
  json_extract_scalar(requestParameters, '$.functionName') AS functionName,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
account = '${account}'
AND region = 'us-west-2'
AND day IN ('05','06', '07', '08', '09')
AND userIdentity.type = 'AssumedRole'
AND userAgent LIKE '%Lambda%'
AND eventName IN (
    'CreateWorkspaces',
    'RebootWorkspaces',
    'StartWorkspaces',
    'StopWorkspaces',
    'TerminateWorkspaces',
    'ModifyWorkspaceProperties'
  )
ORDER BY
  eventTime ASC
LIMIT 1000;
#+end_src

* IAM
** took action against any iam policy (can be used for roles and other resources modified)
#+begin_src athena :var account="12345678910"
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  requestParameters,
  responseElements,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  eventSource = 'iam.amazonaws.com'
  AND eventName IN (
    'CreatePolicy',
    'CreatePolicyVersion',
    'PutPolicyVersion',
    'SetDefaultPolicyVersion',
    'DeletePolicyVersion',
    'DeletePolicy',
    'TagPolicy',
    'UntagPolicy',
    'UpdateAssumeRolePolicy'
  )
  AND userIdentity.accountId = '${account}'
  AND account = '${account}'
  AND year = '2025'
  AND month = '03'
  AND day = '25'
ORDER BY
  eventTime ASC
LIMIT 500;
#+end_src
*** actions performed by role
**** specific date, account, assumable role (sso user role)
#+begin_src athena :var account=1234345678910
SELECT
  eventTime,
  eventSource,
  eventName,
  userIdentity.arn AS roleArn,
  requestParameters,
  responseElements,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  userIdentity.type = 'AssumedRole'
  AND userIdentity.arn = 'arn:aws:sts::${account}:assumed-role/AWSReservedSSO_role_12345433/username@example.com'
  AND userIdentity.accountId = '${account}'
  AND year = '2025'
  AND month = '04'
  AND day = '24'
ORDER BY
  eventTime ASC
LIMIT 10000;
#+end_src
**** perfomed by aws ecs task role
#+begin_src athena  :var account=12345678910
SELECT
  eventTime,
  awsRegion,
  eventSource,
  eventName,
  userIdentity.arn AS roleArn,
  userIdentity.sessionContext.sessionIssuer.userName AS roleName,
  eventType,
  requestParameters,
  responseElements,
  errorCode,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  (
    userIdentity.sessionContext.sessionIssuer.arn = 'arn:aws:iam::${account}:role/ecstaskrole'
    OR userIdentity.arn LIKE 'arn:aws:sts::${account}:assumed-role/ecstaskrole/%'
  )
  AND userIdentity.accountId = '${account}'
  AND year = '2025'
  AND month = '07'
  AND day = '02'
ORDER BY
  eventTime ASC
LIMIT 1000;
#+end_src

* Secrets Manager
** what api request were made for a secret (who is using this secret)
#+begin_src athena  :var account=12345678910
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  eventName,
  eventSource,
  sourceIPAddress,
  userAgent,
  json_extract_scalar(requestParameters, '$.secretId') AS secretId,
  errorCode,
  errorMessage
FROM
  cloudtrail_logs_new
WHERE
  region = 'us-west-2'
  AND eventSource = 'secretsmanager.amazonaws.com'
  AND json_extract_scalar(requestParameters, '$.secretId') = 'arn:aws:secretsmanager:us-west-2:${account}:secret:my/secret/fullarn'
  AND year = '2025'
  AND month = '06'
  AND day = '26'
ORDER BY
  eventTime DESC
LIMIT 100;
#+end_src

* EC2 Instances
** who terminated specific ec2 instance (obviously can be modified for other api calls)
#+begin_src athena :var account=12345678910
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  json_extract(requestParameters, '$.instancesSet.items[0].instanceId') AS instanceId,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  account = '${account}'
  AND region = 'us-west-2'
  AND eventSource = 'ec2.amazonaws.com'
  AND eventName = 'TerminateInstances'
    AND json_extract_scalar(requestParameters, '$.instancesSet.items[0].instanceId') = 'i-abc712345678910ab'
  AND year = '2025'
  AND month = '05'
  AND day = '15'
ORDER BY
  eventTime DESC
LIMIT 100;
#+end_src
** who started/ran an ec2 instance
#+begin_src athena  :var account=12345678910
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  json_extract_scalar(responseElements, '$.instancesSet.items[0].instanceId') AS instanceId,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  account = '${account}'
  AND region = 'us-west-2'
  AND eventSource = 'ec2.amazonaws.com'
  AND eventName IN ('RunInstances', 'StartInstances')
  AND json_extract_scalar(responseElements, '$.instancesSet.items[0].instanceId') = 'i-123456798789798'
  AND year = '2025'
  AND month = '04'
  AND day = '18'
ORDER BY
  eventTime ASC
LIMIT 100;
#+end_src

* SNS
** who deleted topic
#+begin_src athena  :var account=12345678910
SELECT
  eventTime,
  userIdentity.type AS userType,
  userIdentity.arn AS userArn,
  userIdentity.accountId AS accountId,
  userIdentity.sessionContext.sessionIssuer.arn AS sessionIssuerArn,
  eventName,
  json_extract_scalar(requestParameters, '$.topicArn') AS topicArn,
  sourceIPAddress,
  userAgent
FROM
  cloudtrail_logs_new
WHERE
  account = '${account}'
  AND region = 'us-west-2'
  AND eventSource = 'sns.amazonaws.com'
  AND eventName = 'DeleteTopic'
  AND year = '2025'
  AND month = '06'
  AND day = '26'
ORDER BY
  eventTime DESC
LIMIT 100;
#+end_src

* Route 53
** find api request against hostzoneid
#+begin_src athena  :var account=12345678910
SELECT
    eventTime,
    eventName,
    sourceIPAddress,
    userIdentity.arn as userArn,
    -- Extract the Hosted Zone ID from the JSON string in requestParameters
    json_extract_scalar(requestParameters, '$.hostedZoneId') AS hostedZoneId,
    -- The full requestParameters contains the details of the change
    requestParameters
FROM
    cloudtrail_logs_new
WHERE
    recipientAccountId = '${account}'
    -- Filter for Route 53 API calls
    AND eventSource = 'route53.amazonaws.com'
    -- Filter for the specific event that changes record sets
    -- (Optional but Recommended) Filter for a specific Hosted Zone
    AND json_extract_scalar(requestParameters, '$.hostedZoneId') = '123456789ABCDEFG'

    AND year = '2025'
    AND month = '07'
    and day = '23'
ORDER BY
    eventTime DESC
limit 1000;
#+end_src
* ALB Logs
** ALB Access Logs
*** Create partitioned table with log format changes introduced around August 19th, 2025
#+begin_src athena :aws-profile "default"
CREATE EXTERNAL TABLE IF NOT EXISTS alb_access_logs_partitioned (
    type string,
    time string,
    elb string,
    client_ip string,
    client_port int,
    target_ip string,
    target_port int,
    request_processing_time double,
    target_processing_time double,
    response_processing_time double,
    elb_status_code int,
    target_status_code string,
    received_bytes bigint,
    sent_bytes bigint,
    request_verb string,
    request_url string,
    request_proto string,
    user_agent string,
    ssl_cipher string,
    ssl_protocol string,
    target_group_arn string,
    trace_id string,
    domain_name string,
    chosen_cert_arn string,
    matched_rule_priority string,
    request_creation_time string,
    actions_executed string,
    redirect_url string,
    lambda_error_reason string,
    target_port_list string,
    target_status_code_list string,
    classification string,
    classification_reason string,
    conn_trace_id string,
    listener string,
    listener_protocol string,
    server_name string
    )
    PARTITIONED BY
    (
        day STRING
    )
    ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.RegexSerDe'
    WITH SERDEPROPERTIES (
    'serialization.format' = '1',
'input.regex' = '([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \"([^ ]*) (.*) (- |[^ ]*)\" \"([^\"]*)\" ([A-Z0-9-_]+) ([A-Za-z0-9.-]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" ([-.0-9]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^ ]*)\" \"([^\\s]+?)\" \"([^\\s]+)\" \"([^ ]*)\" \"([^\"]*)\" ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\"'
    )
    LOCATION 's3://load-balancer-logging/access-logs/AWSLogs/12345678910/elasticloadbalancing/us-east-2/'
    TBLPROPERTIES
    (
        "projection.enabled" = "true",
        "projection.day.type" = "date",
        "projection.day.range" = "2025/01/01,NOW",
        "projection.day.format" = "yyyy/MM/dd",
        "projection.day.interval" = "1",
        "projection.day.interval.unit" = "DAYS",
        "storage.location.template" = "s3://load-balancer-logging/access-logs/AWSLogs/12345678910/elasticloadbalancing/us-east-2/${day}"
    )
   #+end_src
*** Daily and Hourly Breakdown of ALB 5xx Errors by Status Code
#+begin_src athena
SELECT CAST(from_iso8601_timestamp(time) AS date) AS event_date,
    hour(from_iso8601_timestamp(time)) AS event_hour,
    count(*)
FROM alb_access_logs_partitioned
WHERE day >= '2025/09/19' and elb_status_code >= 500
group by CAST(from_iso8601_timestamp(time) AS date), hour(from_iso8601_timestamp(time))
order by event_date desc, event_hour desc;
#+end_src
*** Extract Date, Hour, Minute, and Day of Week from ISO8601 Timestamp (for using alb timestamp format)
#+begin_src athena
select
  CAST(from_iso8601_timestamp('2025-09-04T20:06:39.750437Z') AS date) AS event_date,
  hour(from_iso8601_timestamp('2025-09-04T20:06:39.750437Z')) AS event_hour,
  minute(from_iso8601_timestamp('2025-09-04T20:06:39.750437Z')) AS event_minute,
  day_of_week(from_iso8601_timestamp('2025-09-04T20:06:39.750437Z')) AS event_day_of_week;
#+end_src
*** Joined ALB Access and Connection Logs for 5xx Errors
#+begin_src athena
SELECT *
FROM alb_access_logs_partitioned a
INNER JOIN senior_priv_alb_connection_logs c
ON a.conn_trace_id = c.conn_trace_id
WHERE a.elb_status_code >= 500
AND a.day >= '2025/09/19';
#+end_src
* Terraform
** who created any user or role via terraform (some iam events like these only appear in us-east-1, so you must use that region)
#+begin_src athena :var account="12345678910" region="us-east-1"
SELECT
    eventTime,
    userIdentity.arn AS userArn,
    eventName,
    COALESCE(
        JSON_EXTRACT_SCALAR(requestParameters, '$.userName'),
        JSON_EXTRACT_SCALAR(requestParameters, '$.roleName')
    ) AS principalName,
    userAgent
FROM
    cloudtrail_logs
WHERE
    account = '${account}'
    AND region = '${region}'
    AND year = '2025'
    AND month = '08'
    AND day = '29'
    AND eventName IN ('CreateUser', 'CreateRole')
    AND (
        userAgent LIKE '%Terraform%'
        OR userAgent LIKE '%HashiCorp%'
    )
ORDER BY
    eventTime ASC;
#+end_src
* VPC
** who created vpc endpoint between two dates dates
#+begin_src athena :var account="12345678910" region="us-west-1"
SELECT DISTINCT
  eventSource,
  eventName,
  requestParameters,
  userIdentity.arn AS roleArn
FROM
  cloudtrail_logs_new
WHERE
  account = '${account}'
  AND year = '2025'
  AND month = '08'
  AND day BETWEEN '13' AND '15'
  AND eventName = 'CreateVpcEndpoint'
ORDER BY
  eventSource,
  eventName
LIMIT 100;
#+end_src
